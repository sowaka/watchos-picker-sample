//
//  PickerStyleKit.swift
//  PickerProject
//
//  Created by Sowaka on 2015/07/24.
//  Copyright (c) 2015 NoAppleNoLife.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class PickerStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let color0: UIColor = UIColor(red: 0.980, green: 0.067, blue: 0.310, alpha: 1.000)
        static let color1: UIColor = UIColor(red: 1.000, green: 0.231, blue: 0.188, alpha: 1.000)
        static let color2: UIColor = UIColor(red: 1.000, green: 0.584, blue: 0.000, alpha: 1.000)
        static let color3: UIColor = UIColor(red: 1.000, green: 0.902, blue: 0.125, alpha: 1.000)
        static let color4: UIColor = UIColor(red: 0.016, green: 0.871, blue: 0.443, alpha: 1.000)
        static let color5: UIColor = UIColor(red: 0.000, green: 0.961, blue: 0.918, alpha: 1.000)
        static let color6: UIColor = UIColor(red: 0.353, green: 0.784, blue: 0.980, alpha: 1.000)
        static let color7: UIColor = UIColor(red: 0.125, green: 0.580, blue: 0.980, alpha: 1.000)
        static let color8: UIColor = UIColor(red: 0.471, green: 0.478, blue: 1.000, alpha: 1.000)
        static let color9: UIColor = UIColor(red: 0.949, green: 0.957, blue: 1.000, alpha: 1.000)
        static let selectedStrokeColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    public class var color0: UIColor { return Cache.color0 }
    public class var color1: UIColor { return Cache.color1 }
    public class var color2: UIColor { return Cache.color2 }
    public class var color3: UIColor { return Cache.color3 }
    public class var color4: UIColor { return Cache.color4 }
    public class var color5: UIColor { return Cache.color5 }
    public class var color6: UIColor { return Cache.color6 }
    public class var color7: UIColor { return Cache.color7 }
    public class var color8: UIColor { return Cache.color8 }
    public class var color9: UIColor { return Cache.color9 }
    public class var selectedStrokeColor: UIColor { return Cache.selectedStrokeColor }

    //// Drawing Methods

    public class func drawColorPicker(value value: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Variable Declarations
        let colorIndex: CGFloat = abs(value % 10)
        let selectedColor = colorIndex == 0 ? PickerStyleKit.color0 : (colorIndex == 1 ? PickerStyleKit.color1 : (colorIndex == 2 ? PickerStyleKit.color2 : (colorIndex == 3 ? PickerStyleKit.color3 : (colorIndex == 4 ? PickerStyleKit.color4 : (colorIndex == 5 ? PickerStyleKit.color5 : (colorIndex == 6 ? PickerStyleKit.color6 : (colorIndex == 7 ? PickerStyleKit.color7 : (colorIndex == 8 ? PickerStyleKit.color8 : (colorIndex == 9 ? PickerStyleKit.color9 : UIColor(red: 0, green: 0, blue: 0, alpha: 0))))))))))
        let angle: CGFloat = 360 - colorIndex * 36

        //// oval selected Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)

        let ovalSelectedPath = UIBezierPath(ovalInRect: CGRectMake(-28, -28, 56, 56))
        selectedColor.setFill()
        ovalSelectedPath.fill()

        CGContextRestoreGState(context)


        //// oval color 9 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -36 * CGFloat(M_PI) / 180)

        let ovalColor9Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color9.setFill()
        ovalColor9Path.fill()

        CGContextRestoreGState(context)


        //// oval color 8 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -72 * CGFloat(M_PI) / 180)

        let ovalColor8Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color8.setFill()
        ovalColor8Path.fill()

        CGContextRestoreGState(context)


        //// oval color 7 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -108 * CGFloat(M_PI) / 180)

        let ovalColor7Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color7.setFill()
        ovalColor7Path.fill()

        CGContextRestoreGState(context)


        //// oval color 6 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -144 * CGFloat(M_PI) / 180)

        let ovalColor6Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color6.setFill()
        ovalColor6Path.fill()

        CGContextRestoreGState(context)


        //// oval color 5 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -180 * CGFloat(M_PI) / 180)

        let ovalColor5Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color5.setFill()
        ovalColor5Path.fill()

        CGContextRestoreGState(context)


        //// oval color 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -216 * CGFloat(M_PI) / 180)

        let ovalColor4Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color4.setFill()
        ovalColor4Path.fill()

        CGContextRestoreGState(context)


        //// oval color 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -252 * CGFloat(M_PI) / 180)

        let ovalColor3Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color3.setFill()
        ovalColor3Path.fill()

        CGContextRestoreGState(context)


        //// oval color 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, 72 * CGFloat(M_PI) / 180)

        let ovalColor2Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color2.setFill()
        ovalColor2Path.fill()

        CGContextRestoreGState(context)


        //// oval color 1 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -324 * CGFloat(M_PI) / 180)

        let ovalColor1Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color1.setFill()
        ovalColor1Path.fill()

        CGContextRestoreGState(context)


        //// oval color 0 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)

        let ovalColor0Path = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.color0.setFill()
        ovalColor0Path.fill()

        CGContextRestoreGState(context)


        //// selected stroke Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 68, 68)
        CGContextRotateCTM(context, -angle * CGFloat(M_PI) / 180)

        let selectedStrokePath = UIBezierPath(ovalInRect: CGRectMake(-10, -64, 20, 20))
        PickerStyleKit.selectedStrokeColor.setStroke()
        selectedStrokePath.lineWidth = 2
        selectedStrokePath.stroke()

        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfColorPicker(value value: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(136, 136), false, 0)
            PickerStyleKit.drawColorPicker(value: value)

        let imageOfColorPicker = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfColorPicker
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
